"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.onFailHandler = void 0;
const diff = __importStar(require("diff"));
const color = {
    actual: '#cc3333',
    expected: '#008000',
};
const formatValue = (value) => (typeof value === 'object' ? JSON.stringify(value, null, 2) : value);
const insertCodeBlock = (value) => `<pre style="max-height: 500px; overflow-y: auto; white-space: pre-wrap;">${value}</pre>`;
const formatDiff = (part) => `<span style="background-color:${part.added ? `${color.expected}; font-weight: bold;` : part.removed ? `${color.actual}; font-weight: bold;` : 'none'};">${part.value}</span>`;
function onFailHandler(error, runnable) {
    if (!error.actual)
        throw error;
    if (!error.expected)
        throw error;
    if (typeof error.actual === 'number')
        throw error;
    // @ts-expect-error - TODO: improve types
    if (typeof error.actual === 'object' && error.actual.constructor.name === 'jQuery')
        throw error;
    if (error.message.includes(' to contain text '))
        throw error;
    if (error.name === 'AssertionError') {
        window.top.document.querySelectorAll('.command-info').forEach((element) => {
            const methodSpan = element.querySelector('.command-method > span');
            const messageElement = element.querySelector('.command-message-text');
            const errorMessage = runnable.commands[runnable.commands.length - 1].message;
            const unboldedErrorMessage = errorMessage.replaceAll('**', '');
            const unboldedExpectedValueErrorMessage = errorMessage.replace(/\*\*([^*]+)\*\*/, '$1');
            const includesErrorMessage = (message) => messageElement?.textContent?.includes(message);
            if (methodSpan && methodSpan.textContent === 'assert') {
                if (includesErrorMessage(errorMessage) ||
                    includesErrorMessage(unboldedErrorMessage) ||
                    includesErrorMessage(unboldedExpectedValueErrorMessage)) {
                    if (messageElement) {
                        methodSpan?.parentElement?.remove();
                        const actual = formatValue(error.actual);
                        const expected = formatValue(error.expected);
                        const diffResult = diff.diffChars(actual, expected);
                        let actualFormatted = '';
                        let expectedFormatted = '';
                        diffResult.forEach((part) => {
                            const span = formatDiff(part);
                            actualFormatted += part.removed || !part.added ? span : '';
                            expectedFormatted += part.added || !part.removed ? span : '';
                        });
                        messageElement.innerHTML = `
            <div><span style="color: ${color.expected};">Expected:</span>${insertCodeBlock(expectedFormatted)}</div>
            <div><span style="color: ${color.actual};">Actual:</span>${insertCodeBlock(actualFormatted)}</div>`;
                    }
                }
            }
        });
    }
    throw error;
}
exports.onFailHandler = onFailHandler;
